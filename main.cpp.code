#include <iostream>
#include <vector>
using namespace std;

struct SparseMatrix {
    int row;
    int col;
    int val;
};

int main() {
    int m, n;

    cout << "Enter number of rows: ";
    cin >> m;
    if (m <= 0) {
        cout << "Invalid entry! Number of rows must be greater than 0.\n";
        return 0;
    }

    cout << "Enter number of columns: ";
    cin >> n;
    if (n <= 0) {
        cout << "Invalid entry! Number of columns must be greater than 0.\n";
        return 0;
    }

    // Create 2D matrix using vector
    vector<vector<int>> matrix(m, vector<int>(n));

    cout << "Enter " << m * n << " elements one at a time:\n";
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cout << "Element at (" << i << "," << j << "): ";
            cin >> matrix[i][j];
        }
    }

    // Count non-zero elements
    int count = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] != 0)
                count++;
        }
    }

    // Sparse representation (count + 1 for metadata)
    vector<SparseMatrix> sparse(count + 1);
    sparse[0].row = m;
    sparse[0].col = n;
    sparse[0].val = count;

    int k = 1;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] != 0) {
                sparse[k].row = i;
                sparse[k].col = j;
                sparse[k].val = matrix[i][j];
                k++;
            }
        }
    }

    // Display sparse matrix
    cout << "\nSparse Matrix Representation (Row Col Val):\n";
    for (int i = 0; i <= count; i++) {
        cout << sparse[i].row << " " << sparse[i].col << " " << sparse[i].val << endl;
    }

    return 0;
}
